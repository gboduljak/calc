module ParserSpec (
  parserSpec
) 
where
import Test.Hspec
import Data.Map
import Lexer (lexicallyAnalyse)
import Parser (parse)
import Tokens (Token, Token(..))
import Ast (      
  Exp, Exp(..), 
  Exp', Exp'(..), 
  Term, Term(..), 
  Term',Term'(..),
  Factor, Factor(..),
  Atom, Atom(..),
  ArithOp, ArithOp(..))


lexed :: String -> [Token]
lexed = tokensOf . lexicallyAnalyse
  where tokensOf (Just tokens) = tokens
        tokensof Nothing = []
tests :: Map Int ([Token], Maybe Exp)
tests = fromList [
  (1, ((lexed "1.0 + 2.0 * 3.0 / ( 6.0*6.0 + 5.0*44.0)"), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}, term'Term' = NontrivialTerm' {term'Op = Div, term'Factor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 6.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 6.0}}, term'Term' = TrivalTerm'}}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 5.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 44.0}}, term'Term' = TrivalTerm'}}, exp'Exp' = TrivialExp'}}}}, term'Term' = TrivalTerm'}}}, exp'Exp' = TrivialExp'}}))),
  (2, ((lexed " 1 "), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = TrivalTerm'}, expExp' = TrivialExp'}))),
  (3, ((lexed " - - 3"), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = NegativeFactor {innerFactor = NegativeFactor {innerFactor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}}}, termTerm' = TrivalTerm'}, expExp' = TrivialExp'}))),
  (4, ((lexed "1 + 2 * 3 "), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}, term'Term' = TrivalTerm'}}, exp'Exp' = TrivialExp'}}))),
  (5, ((lexed " 1 * 2 + 3 "), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, term'Term' = TrivalTerm'}}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}))),
  (6, ((lexed " 4 * (2 + 3) "),  Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}, term'Term' = TrivalTerm'}}, expExp' = TrivialExp'}))),
  (7, ((lexed " 1 + 2 + 3 + 4 + 5 + 6 + 7 "), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 5.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 6.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 7.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}}}}))),
  (8, ((lexed " 1 +2 -3 +4 -5 +6 + 7 +8 + 9-10+  11 "), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Sub, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Sub, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 5.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 6.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 7.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 8.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 9.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Sub, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 10.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 11.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}}}}}}}}))),
  (9, ((lexed " 1 -2 + 4 - 2 *5 +3 * 6 *7+4 - 134 *5 "), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Sub, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Sub, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 5.0}}, term'Term' = TrivalTerm'}}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 6.0}}, term'Term' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 7.0}}, term'Term' = TrivalTerm'}}}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Sub, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 134.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 5.0}}, term'Term' = TrivalTerm'}}, exp'Exp' = TrivialExp'}}}}}}}))),
  (10, ((lexed " ( 1 + 2) * (2 + 3) + (4 * 5) + (6 * 7) / ((5 -2) * (2 +4)) "), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}, term'Term' = TrivalTerm'}}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 5.0}}, term'Term' = TrivalTerm'}}, expExp' = TrivialExp'}}}, termTerm' = TrivalTerm'}, exp'Exp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 6.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 7.0}}, term'Term' = TrivalTerm'}}, expExp' = TrivialExp'}}}, termTerm' = NontrivialTerm' {term'Op = Div, term'Factor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 5.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Sub, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}, term'Term' = TrivalTerm'}}, expExp' = TrivialExp'}}}, term'Term' = TrivalTerm'}}, exp'Exp' = TrivialExp'}}}))),
  (11, ((lexed " (1 + 2) * (5 - (4 / 2)) "), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 5.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Sub, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = NontrivialTerm' {term'Op = Div, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, term'Term' = TrivalTerm'}}, expExp' = TrivialExp'}}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}, term'Term' = TrivalTerm'}}, expExp' = TrivialExp'}))),
  (12, ((lexed " - (3 + (4 / 2)) * (- (4 + 2*4 - 1)) "), Just (NontrivialExp {expTerm = NontrivialTerm {termFactor = NegativeFactor {innerFactor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 3.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = NontrivialTerm' {term'Op = Div, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, term'Term' = TrivalTerm'}}, expExp' = TrivialExp'}}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = NegativeFactor {innerFactor = AtomicFactor {innerAtom = ExpAtom {innerExp = NontrivialExp {expTerm = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, termTerm' = TrivalTerm'}, expExp' = NontrivialExp' {exp'Op = Add, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 2.0}}, termTerm' = NontrivialTerm' {term'Op = Mul, term'Factor = AtomicFactor {innerAtom = NumericAtom {number = 4.0}}, term'Term' = TrivalTerm'}}, exp'Exp' = NontrivialExp' {exp'Op = Sub, exp'Term = NontrivialTerm {termFactor = AtomicFactor {innerAtom = NumericAtom {number = 1.0}}, termTerm' = TrivalTerm'}, exp'Exp' = TrivialExp'}}}}}}, termTerm' = TrivalTerm'}, expExp' = TrivialExp'}}}, term'Term' = TrivalTerm'}}, expExp' = TrivialExp'}))),
  (13, ((lexed " + 2 + 1 "), Nothing)),
  (14, ((lexed " (1 + 2)) * (5 - (4 / 2)) "), Nothing)),
  (15, ((lexed " - ((3 + (4 / 2)*() * (- (4 + 2*4 - 1)) "), Nothing))]

parserSpec :: Spec
parserSpec = do
  describe "parser tests ..." $ do
    it "correctly parses #1" $ do
      parse (fst (tests ! 1)) `shouldBe` (snd (tests ! 1))
    it "correctly parses #2" $ do
      parse (fst (tests ! 2)) `shouldBe` (snd (tests ! 2))
    it "correctly parses #3" $ do
      parse (fst (tests ! 3)) `shouldBe` (snd (tests ! 3))
    it "correctly parses #4" $ do
      parse (fst (tests ! 4)) `shouldBe` (snd (tests ! 4))
    it "correctly parses #5" $ do
      parse (fst (tests ! 5)) `shouldBe` (snd (tests ! 5))
    it "correctly parses #6" $ do
      parse (fst (tests ! 6)) `shouldBe` (snd (tests ! 6))
    it "correctly parses #7" $ do
      parse (fst (tests ! 7)) `shouldBe` (snd (tests ! 7))
    it "correctly parses #8" $ do
      parse (fst (tests ! 8)) `shouldBe` (snd (tests ! 8))
    it "correctly parses #9" $ do
      parse (fst (tests ! 9)) `shouldBe` (snd (tests ! 9))
    it "correctly parses #10" $ do
      parse (fst (tests ! 10)) `shouldBe` (snd (tests ! 10))
    it "correctly parses #11" $ do
      parse (fst (tests ! 11)) `shouldBe` (snd (tests ! 11))
    it "correctly parses #12" $ do
      parse (fst (tests ! 12)) `shouldBe` (snd (tests ! 12))
    it "correctly parses #13" $ do
      parse (fst (tests ! 13)) `shouldBe` (snd (tests ! 13))
    it "correctly parses #14" $ do
      parse (fst (tests ! 14)) `shouldBe` (snd (tests ! 14))
    it "correctly parses #15" $ do
      parse (fst (tests ! 15)) `shouldBe` (snd (tests ! 15))
